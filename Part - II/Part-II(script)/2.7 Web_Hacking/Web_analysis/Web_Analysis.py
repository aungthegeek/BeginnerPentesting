import requests
from bs4 import BeautifulSoup
from urllib.request import urlparse, urljoin
import time

print("""
 __    __     _       __                                 
/ / /\ \ \___| |__   / _\ ___ __ _ _ __  _ __   ___ _ __ 
\ \/  \/ / _ \ '_ \  \ \ / __/ _` | '_ \| '_ \ / _ \ '__|
 \  /\  /  __/ |_) | _\ \ (_| (_| | | | | | | |  __/ |   
  \/  \/ \___|_.__/  \__/\___\__,_|_| |_|_| |_|\___|_|   
                                                      
""")

bright_cyan = "\033[0;96m"
red = "\033[0;31m"
blue = "\033[0;34m"
yellow='\033[93m'

url  = input(bright_cyan+ "Enter Target URL : ")

cookies = {'security' : 'low', 'PHPSESSID':'ev5mlspqdiklrgaqfqbh00act0'}

r = requests.post(url, cookies = cookies)

soup = BeautifulSoup(r.text, 'lxml')

for link in soup.findAll('a', href = True):

    url_main = (link['href'])
    #print(url_main) 
    
    URL = url_main.replace("include.php", " ")

    if "exec" in url_main:
        command_url = urljoin(url, url_main)
        #print(command_url)
     
    if "fi" in url_main: #File Inclusion

        final_url = urljoin(url, URL)
        print(bright_cyan+"\nStart scanning Vulnerability : ", url)
        time.sleep(2)
        
    if "xss_r" in url_main: #XSS_reflected
        xssr_url = urljoin(url, url_main)
        time.sleep(2)

    if "xss_s" in url_main:
        xsss_url = urljoin(url, url_main)
        time.sleep(2)

    if "sqli/" in url_main:
        sqli_url = urljoin(url,url_main)
        time.sleep(2)

#CMD
cmd_pay = "ping 8.8.8.8|netstat -an"      

#LFI
lfi_pay = "/../../../../../proc/version"
lfi_words = ['root','version','crontab','host','log']

#RFI
rfi_pay = "https://www.google.com"

#reflected_xss
refl_pay = "<script>alert('Hello Bug')</script>"

#stored_xss
stored_pay = "<script>alert('Hello Bug')</script>"

#sqli
initial = " ' "

def cmd_func():
    form = {"ip" : cmd_pay , "Submit" : "Submit"}
    req = requests.post(url, cookies = cookies, data = form)
    soup = BeautifulSoup(req.text, "lxml")
    if  "tcp" or "unix" in soup.pre:
        print(blue+red+'\n <-------- [Detect Command Injection] ------->\n','\nURL : ', command_url,'\n')
    else:
        print("Not found Command Injection vulnerability")

def lfi_func():

    ur=requests.get(final_url+'{}'.format(lfi_pay),cookies=cookies)
    if any(s in ur.content.decode("utf-8") for s in lfi_words):
        print( red+'\n <-------- [Detect LFI] ------->\n','\nURL : ', final_url,'\n') 
    else:
        print(blue+"Not found LFI vulnerability")

def rfi_func():

    response=requests.get(final_url+'{}'.format(rfi_pay),cookies=cookies)
    if response.status_code == 200:
        print(red+'\n <-------- [Detect RFI] ------->\n','\nURL : ', final_url,'\n')
            
    else:
        print(blue+"Not found RFI vulnerability")

def ref_func():

    form = {"name" : refl_pay}
    req = requests.get(xssr_url, cookies = cookies , params = form)
    if refl_pay in req.text:
        print(red+'\n <-------- [Detect XSS-Reflected] ------->\n','\nURL : ', xssr_url,'\n')
    else: 
        print(blue+"Not found XSS-Reflected vulnerability")

def stor_func():

    form = {"txtName" : stored_pay , "mtxMessage" : stored_pay, "btnSign" : "Sign Guestbook"}
    req = requests.post(xsss_url, cookies = cookies , data = form)
    if stored_pay in req.text:
        print(red+'\n <-------- [Detect XSS-Stored] ------->\n','\nURL : ', xsss_url,'\n')
    else:
        print(blue+"Not found XSS-Stored vulnerability")

def sqli_func():

    form = {"id":initial, "Submit":"Submit"}
    req = requests.post(sqli_url, cookies = cookies, data = form)

    if "You have an error in your SQL syntax;" in req.text:
        print(red+'\n <-------- [Detect SQL Injection] ------->\n','\nURL : ', sqli_url,'\n')
    else:
        print(blue+"\nNot found SQL Injection Vulnerability : ", '\n\n')

def main():
    cmd_func()
    time.sleep(3)
    lfi_func()
    time.sleep(3)
    rfi_func()
    time.sleep(3)
    ref_func()
    time.sleep(3)
    stor_func()
    time.sleep(3)
    sqli_func()

if __name__ == "__main__":
    main()
    
print(yellow+"Scan Complete!.......................\n")
